import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { WhiteLabelConfig, DEFAULT_WHITELABEL_CONFIG } from '../types/whitelabel';
import { apiClient } from '../utils/apiClient';

interface WhiteLabelContextType {
  config: WhiteLabelConfig;
  isWhiteLabel: boolean;
  isLoading: boolean;
  error: string | null;
  loadConfig: (clientId?: string, domain?: string) => Promise<void>;
  applyTheme: (config: WhiteLabelConfig) => void;
}

const WhiteLabelContext = createContext<WhiteLabelContextType | undefined>(undefined);

interface WhiteLabelProviderProps {
  children: ReactNode;
}

export const WhiteLabelProvider: React.FC<WhiteLabelProviderProps> = ({ children }) => {
  const [config, setConfig] = useState<WhiteLabelConfig>(DEFAULT_WHITELABEL_CONFIG);
  const [isWhiteLabel, setIsWhiteLabel] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const applyTheme = (newConfig: WhiteLabelConfig) => {
    // Apply CSS custom properties for theming
    const root = document.documentElement;
    root.style.setProperty('--wl-primary-color', newConfig.primaryColor);
    root.style.setProperty('--wl-secondary-color', newConfig.secondaryColor);
    root.style.setProperty('--wl-accent-color', newConfig.accentColor);
    
    // Update page title
    document.title = `${newConfig.companyName} - ROI Calculator`;
    
    // Update favicon if provided
    if (newConfig.logoUrl) {
      let favicon = document.querySelector('link[rel="icon"]') as HTMLLinkElement;
      if (!favicon) {
        favicon = document.createElement('link');
        favicon.rel = 'icon';
        document.head.appendChild(favicon);
      }
      favicon.href = newConfig.logoUrl;
      
      // Also update shortcut icon
      let shortcutIcon = document.querySelector('link[rel="shortcut icon"]') as HTMLLinkElement;
      if (!shortcutIcon) {
        shortcutIcon = document.createElement('link');
        shortcutIcon.rel = 'shortcut icon';
        document.head.appendChild(shortcutIcon);
      }
      shortcutIcon.href = newConfig.logoUrl;
    }
    
    setConfig(newConfig);
  };

  const loadConfig = async (clientId?: string, domain?: string) => {
    setIsLoading(true);
    setError(null);

    console.log('WhiteLabel loadConfig called with:', { clientId, domain });

    try {
      let response;
      
      if (clientId) {
        // Load by client ID (for demo or direct access)
        if (clientId === 'smith-financial' || clientId === 'acme-consulting') {
          // Try demo first
          console.log('Calling getDemoWhiteLabelConfig for:', clientId);
          response = await apiClient.getDemoWhiteLabelConfig(clientId);
          console.log('Demo API response:', response);
        } else {
          // Try real config
          console.log('Calling getWhiteLabelConfig for:', clientId);
          response = await apiClient.getWhiteLabelConfig(clientId);
          console.log('Real API response:', response);
        }
      } else if (domain) {
        // Load by domain
        console.log('Calling getWhiteLabelByDomain for:', domain);
        response = await apiClient.getWhiteLabelByDomain(domain);
        console.log('Domain API response:', response);
      } else {
        // Auto-detect from current domain
        const currentDomain = window.location.hostname;
        if (currentDomain !== 'localhost' && currentDomain !== 'investwisepro.netlify.app') {
          console.log('Auto-detecting domain:', currentDomain);
          response = await apiClient.getWhiteLabelByDomain(currentDomain);
        }
      }

      if (response && response.success && response.data) {
        const data = response.data as any; // Type assertion for API response
        const whiteLabelConfig: WhiteLabelConfig = {
          companyName: data.company_name || data.companyName,
          logoUrl: data.logo_url || data.logoUrl,
          primaryColor: data.primary_color || data.primaryColor,
          secondaryColor: data.secondary_color || data.secondaryColor,
          accentColor: data.accent_color || data.accentColor,
          domain: data.custom_domain || data.subdomain || window.location.hostname,
          supportEmail: data.support_email || data.supportEmail,
          contactUrl: data.contact_url || data.contactUrl,
          pdfHeaderText: data.pdf_header_text || data.pdfHeaderText || `${data.company_name || data.companyName} - ROI Analysis`,
          pdfFooterText: data.pdf_footer_text || data.pdfFooterText || `Generated by ${data.company_name || data.companyName}`,
          pdfLogoUrl: data.pdf_logo_url || data.pdfLogoUrl,
          showPoweredBy: data.show_powered_by !== undefined ? data.show_powered_by : (data.showPoweredBy !== undefined ? data.showPoweredBy : true),
          customFooter: data.custom_footer || data.customFooter,
          companyAddress: data.company_address || data.companyAddress,
          phoneNumber: data.phone_number || data.phoneNumber,
          website: data.website
        };

        applyTheme(whiteLabelConfig);
        setIsWhiteLabel(true);
      } else {
        // No white label config found, use default
        applyTheme(DEFAULT_WHITELABEL_CONFIG);
        setIsWhiteLabel(false);
      }
    } catch (err) {
      console.warn('Failed to load white label config:', err);
      // Fall back to default config
      applyTheme(DEFAULT_WHITELABEL_CONFIG);
      setIsWhiteLabel(false);
      setError('Failed to load branding configuration');
    } finally {
      setIsLoading(false);
    }
  };

  // Auto-load config on mount
  useEffect(() => {
    // Check URL for client ID parameter
    const urlParams = new URLSearchParams(window.location.search);
    const clientId = urlParams.get('client') || urlParams.get('wl');
    
    console.log('WhiteLabel Context: URL params check', { 
      clientId, 
      fullUrl: window.location.href,
      search: window.location.search 
    });
    
    // Check subdomain
    const hostname = window.location.hostname;
    const isSubdomain = hostname.includes('.') && 
                       !hostname.startsWith('www.') && 
                       hostname !== 'investwisepro.netlify.app' &&
                       hostname !== 'localhost';

    if (clientId) {
      console.log('Loading white label config for client:', clientId);
      loadConfig(clientId);
    } else if (isSubdomain) {
      console.log('Loading white label config for subdomain:', hostname);
      loadConfig(undefined, hostname);
    } else {
      console.log('No white label config detected, using default theme');
      // Apply default theme
      applyTheme(DEFAULT_WHITELABEL_CONFIG);
    }
  }, []);

  const value: WhiteLabelContextType = {
    config,
    isWhiteLabel,
    isLoading,
    error,
    loadConfig,
    applyTheme
  };

  return (
    <WhiteLabelContext.Provider value={value}>
      {children}
    </WhiteLabelContext.Provider>
  );
};

export const useWhiteLabel = (): WhiteLabelContextType => {
  const context = useContext(WhiteLabelContext);
  if (context === undefined) {
    throw new Error('useWhiteLabel must be used within a WhiteLabelProvider');
  }
  return context;
};